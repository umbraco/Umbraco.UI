#!/usr/bin/env node
const path = require('path');
const fs = require('fs');
const { packageDirectoryNames, packagesRoot, packageNamespace } = require('./packages');

const TSCONFIG_COMMENT = `// Don't edit this file directly. It is generated by /scripts/generate-ts-config.js\n\n`;

const tsConfigBase = {
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./lib",
    "rootDir": "./src",
    "composite": true
  },
  "include": ["./**/*.ts"],
  "exclude": ["./lib", "./**/*.test.ts"]
};

packageDirectoryNames.forEach(packageDirectoryName => {
  const packageDirectory = path.join(packagesRoot, packageDirectoryName);
  const packageJSONPath = path.join(packageDirectory, 'package.json');

  if (!fs.existsSync(packageJSONPath)) {
    console.error();
    console.error(`Could not find package.json: ${packageJSONPath}`);
    console.error();
    process.exit(1);
  }

  const packageJSONData = JSON.parse(fs.readFileSync(packageJSONPath).toString());
  const { dependencies, devDependencies } = packageJSONData;
  const allDependencies = { ...dependencies, ...devDependencies };
  const dependencyNames = Object.keys(allDependencies);
  const internalDependencies = dependencyNames.filter(name => name.startsWith(packageNamespace));

  const references = internalDependencies.map(name => {
    return { "path": `../${name.replace(`${packageNamespace}/`, '')}` }
  });

  const tsConfig = { ...tsConfigBase, references };
  const tsconfigPath = path.join(packageDirectory, 'tsconfig.json');

  fs.writeFileSync(tsconfigPath, TSCONFIG_COMMENT + JSON.stringify(tsConfig, null, '  '));
});